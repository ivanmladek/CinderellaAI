// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(strathweb_phi_engineFFI)
import strathweb_phi_engineFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_strathweb_phi_engine_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_strathweb_phi_engine_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
                throw CancellationError()

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterFloat: FfiConverterPrimitive {
    typealias FfiType = Float
    typealias SwiftType = Float

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Float {
        return try lift(readFloat(&buf))
    }

    public static func write(_ value: Float, into buf: inout [UInt8]) {
        writeFloat(&buf, lower(value))
    }
}

fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


public protocol BoxedPhiEventHandlerProtocol {
    
}

public class BoxedPhiEventHandler: BoxedPhiEventHandlerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(handler: PhiEventHandler)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_strathweb_phi_engine_fn_constructor_boxedphieventhandler_new(
        FfiConverterCallbackInterfacePhiEventHandler.lower(handler),$0)
})
    }

    deinit {
        try! rustCall { uniffi_strathweb_phi_engine_fn_free_boxedphieventhandler(pointer, $0) }
    }

    

    
    
}

public struct FfiConverterTypeBoxedPhiEventHandler: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BoxedPhiEventHandler

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BoxedPhiEventHandler {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BoxedPhiEventHandler, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BoxedPhiEventHandler {
        return BoxedPhiEventHandler(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BoxedPhiEventHandler) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeBoxedPhiEventHandler_lift(_ pointer: UnsafeMutableRawPointer) throws -> BoxedPhiEventHandler {
    return try FfiConverterTypeBoxedPhiEventHandler.lift(pointer)
}

public func FfiConverterTypeBoxedPhiEventHandler_lower(_ value: BoxedPhiEventHandler) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBoxedPhiEventHandler.lower(value)
}


public protocol InferenceOptionsBuilderProtocol {
    func build()  throws -> InferenceOptions
    func withRepeatLastN(repeatLastN: UInt16)  throws
    func withRepeatPenalty(repeatPenalty: Float)  throws
    func withSeed(seed: UInt64)  throws
    func withTemperature(temperature: Double)  throws
    func withTokenCount(contextWindow: UInt16)  throws
    func withTopK(topK: UInt64)  throws
    func withTopP(topP: Double)  throws
    
}

public class InferenceOptionsBuilder: InferenceOptionsBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init()  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_strathweb_phi_engine_fn_constructor_inferenceoptionsbuilder_new($0)
})
    }

    deinit {
        try! rustCall { uniffi_strathweb_phi_engine_fn_free_inferenceoptionsbuilder(pointer, $0) }
    }

    

    
    

    public func build() throws -> InferenceOptions {
        return try  FfiConverterTypeInferenceOptions.lift(
            try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_build(self.pointer, $0
    )
}
        )
    }

    public func withRepeatLastN(repeatLastN: UInt16) throws {
        try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_repeat_last_n(self.pointer, 
        FfiConverterUInt16.lower(repeatLastN),$0
    )
}
    }

    public func withRepeatPenalty(repeatPenalty: Float) throws {
        try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_repeat_penalty(self.pointer, 
        FfiConverterFloat.lower(repeatPenalty),$0
    )
}
    }

    public func withSeed(seed: UInt64) throws {
        try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_seed(self.pointer, 
        FfiConverterUInt64.lower(seed),$0
    )
}
    }

    public func withTemperature(temperature: Double) throws {
        try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_temperature(self.pointer, 
        FfiConverterDouble.lower(temperature),$0
    )
}
    }

    public func withTokenCount(contextWindow: UInt16) throws {
        try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_token_count(self.pointer, 
        FfiConverterUInt16.lower(contextWindow),$0
    )
}
    }

    public func withTopK(topK: UInt64) throws {
        try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_top_k(self.pointer, 
        FfiConverterUInt64.lower(topK),$0
    )
}
    }

    public func withTopP(topP: Double) throws {
        try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_top_p(self.pointer, 
        FfiConverterDouble.lower(topP),$0
    )
}
    }
}

public struct FfiConverterTypeInferenceOptionsBuilder: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = InferenceOptionsBuilder

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InferenceOptionsBuilder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: InferenceOptionsBuilder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> InferenceOptionsBuilder {
        return InferenceOptionsBuilder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: InferenceOptionsBuilder) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeInferenceOptionsBuilder_lift(_ pointer: UnsafeMutableRawPointer) throws -> InferenceOptionsBuilder {
    return try FfiConverterTypeInferenceOptionsBuilder.lift(pointer)
}

public func FfiConverterTypeInferenceOptionsBuilder_lower(_ value: InferenceOptionsBuilder) -> UnsafeMutableRawPointer {
    return FfiConverterTypeInferenceOptionsBuilder.lower(value)
}


public protocol PhiEngineProtocol {
    func runInference(promptText: String, conversationContext: ConversationContext, inferenceOptions: InferenceOptions)  throws -> InferenceResult
    
}

public class PhiEngine: PhiEngineProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_strathweb_phi_engine_fn_free_phiengine(pointer, $0) }
    }

    

    
    

    public func runInference(promptText: String, conversationContext: ConversationContext, inferenceOptions: InferenceOptions) throws -> InferenceResult {
        return try  FfiConverterTypeInferenceResult.lift(
            try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_phiengine_run_inference(self.pointer, 
        FfiConverterString.lower(promptText),
        FfiConverterTypeConversationContext.lower(conversationContext),
        FfiConverterTypeInferenceOptions.lower(inferenceOptions),$0
    )
}
        )
    }
}

public struct FfiConverterTypePhiEngine: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PhiEngine

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PhiEngine {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PhiEngine, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PhiEngine {
        return PhiEngine(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PhiEngine) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypePhiEngine_lift(_ pointer: UnsafeMutableRawPointer) throws -> PhiEngine {
    return try FfiConverterTypePhiEngine.lift(pointer)
}

public func FfiConverterTypePhiEngine_lower(_ value: PhiEngine) -> UnsafeMutableRawPointer {
    return FfiConverterTypePhiEngine.lower(value)
}


public protocol PhiEngineBuilderProtocol {
    func build(cacheDir: String)  throws -> PhiEngine
    func buildStateful(cacheDir: String, systemInstruction: String?)  throws -> StatefulPhiEngine
    func tryUseGpu()  throws -> Bool
    func withContextWindow(contextWindow: UInt16)  throws
    func withEventHandler(eventHandler: BoxedPhiEventHandler)  throws
    func withFlashAttention(useFlashAttention: Bool)  throws
    func withModelProvider(modelProvider: PhiModelProvider)  throws
    func withTokenizerProvider(tokenizerProvider: TokenizerProvider)  throws
    
}

public class PhiEngineBuilder: PhiEngineBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init()  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_strathweb_phi_engine_fn_constructor_phienginebuilder_new($0)
})
    }

    deinit {
        try! rustCall { uniffi_strathweb_phi_engine_fn_free_phienginebuilder(pointer, $0) }
    }

    

    
    

    public func build(cacheDir: String) throws -> PhiEngine {
        return try  FfiConverterTypePhiEngine.lift(
            try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_phienginebuilder_build(self.pointer, 
        FfiConverterString.lower(cacheDir),$0
    )
}
        )
    }

    public func buildStateful(cacheDir: String, systemInstruction: String?) throws -> StatefulPhiEngine {
        return try  FfiConverterTypeStatefulPhiEngine.lift(
            try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_phienginebuilder_build_stateful(self.pointer, 
        FfiConverterString.lower(cacheDir),
        FfiConverterOptionString.lower(systemInstruction),$0
    )
}
        )
    }

    public func tryUseGpu() throws -> Bool {
        return try  FfiConverterBool.lift(
            try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_phienginebuilder_try_use_gpu(self.pointer, $0
    )
}
        )
    }

    public func withContextWindow(contextWindow: UInt16) throws {
        try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_context_window(self.pointer, 
        FfiConverterUInt16.lower(contextWindow),$0
    )
}
    }

    public func withEventHandler(eventHandler: BoxedPhiEventHandler) throws {
        try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_event_handler(self.pointer, 
        FfiConverterTypeBoxedPhiEventHandler.lower(eventHandler),$0
    )
}
    }

    public func withFlashAttention(useFlashAttention: Bool) throws {
        try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_flash_attention(self.pointer, 
        FfiConverterBool.lower(useFlashAttention),$0
    )
}
    }

    public func withModelProvider(modelProvider: PhiModelProvider) throws {
        try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_model_provider(self.pointer, 
        FfiConverterTypePhiModelProvider.lower(modelProvider),$0
    )
}
    }

    public func withTokenizerProvider(tokenizerProvider: TokenizerProvider) throws {
        try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_tokenizer_provider(self.pointer, 
        FfiConverterTypeTokenizerProvider.lower(tokenizerProvider),$0
    )
}
    }
}

public struct FfiConverterTypePhiEngineBuilder: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PhiEngineBuilder

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PhiEngineBuilder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PhiEngineBuilder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PhiEngineBuilder {
        return PhiEngineBuilder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PhiEngineBuilder) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypePhiEngineBuilder_lift(_ pointer: UnsafeMutableRawPointer) throws -> PhiEngineBuilder {
    return try FfiConverterTypePhiEngineBuilder.lift(pointer)
}

public func FfiConverterTypePhiEngineBuilder_lower(_ value: PhiEngineBuilder) -> UnsafeMutableRawPointer {
    return FfiConverterTypePhiEngineBuilder.lower(value)
}


public protocol StatefulPhiEngineProtocol {
    func clearMesssages()  throws
    func getHistory()  throws -> [ConversationMessage]
    func runInference(promptText: String, inferenceOptions: InferenceOptions)  throws -> InferenceResult
    
}

public class StatefulPhiEngine: StatefulPhiEngineProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_strathweb_phi_engine_fn_free_statefulphiengine(pointer, $0) }
    }

    

    
    

    public func clearMesssages() throws {
        try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_statefulphiengine_clear_messsages(self.pointer, $0
    )
}
    }

    public func getHistory() throws -> [ConversationMessage] {
        return try  FfiConverterSequenceTypeConversationMessage.lift(
            try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_statefulphiengine_get_history(self.pointer, $0
    )
}
        )
    }

    public func runInference(promptText: String, inferenceOptions: InferenceOptions) throws -> InferenceResult {
        return try  FfiConverterTypeInferenceResult.lift(
            try 
    rustCallWithError(FfiConverterTypePhiError.lift) {
    uniffi_strathweb_phi_engine_fn_method_statefulphiengine_run_inference(self.pointer, 
        FfiConverterString.lower(promptText),
        FfiConverterTypeInferenceOptions.lower(inferenceOptions),$0
    )
}
        )
    }
}

public struct FfiConverterTypeStatefulPhiEngine: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = StatefulPhiEngine

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StatefulPhiEngine {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: StatefulPhiEngine, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> StatefulPhiEngine {
        return StatefulPhiEngine(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: StatefulPhiEngine) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeStatefulPhiEngine_lift(_ pointer: UnsafeMutableRawPointer) throws -> StatefulPhiEngine {
    return try FfiConverterTypeStatefulPhiEngine.lift(pointer)
}

public func FfiConverterTypeStatefulPhiEngine_lower(_ value: StatefulPhiEngine) -> UnsafeMutableRawPointer {
    return FfiConverterTypeStatefulPhiEngine.lower(value)
}


public struct ConversationContext {
    public var messages: [ConversationMessage]
    public var systemInstruction: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(messages: [ConversationMessage], systemInstruction: String?) {
        self.messages = messages
        self.systemInstruction = systemInstruction
    }
}


extension ConversationContext: Equatable, Hashable {
    public static func ==(lhs: ConversationContext, rhs: ConversationContext) -> Bool {
        if lhs.messages != rhs.messages {
            return false
        }
        if lhs.systemInstruction != rhs.systemInstruction {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(messages)
        hasher.combine(systemInstruction)
    }
}


public struct FfiConverterTypeConversationContext: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConversationContext {
        return try ConversationContext(
            messages: FfiConverterSequenceTypeConversationMessage.read(from: &buf), 
            systemInstruction: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: ConversationContext, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeConversationMessage.write(value.messages, into: &buf)
        FfiConverterOptionString.write(value.systemInstruction, into: &buf)
    }
}


public func FfiConverterTypeConversationContext_lift(_ buf: RustBuffer) throws -> ConversationContext {
    return try FfiConverterTypeConversationContext.lift(buf)
}

public func FfiConverterTypeConversationContext_lower(_ value: ConversationContext) -> RustBuffer {
    return FfiConverterTypeConversationContext.lower(value)
}


public struct ConversationMessage {
    public var role: Role
    public var text: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(role: Role, text: String) {
        self.role = role
        self.text = text
    }
}


extension ConversationMessage: Equatable, Hashable {
    public static func ==(lhs: ConversationMessage, rhs: ConversationMessage) -> Bool {
        if lhs.role != rhs.role {
            return false
        }
        if lhs.text != rhs.text {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(role)
        hasher.combine(text)
    }
}


public struct FfiConverterTypeConversationMessage: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConversationMessage {
        return try ConversationMessage(
            role: FfiConverterTypeRole.read(from: &buf), 
            text: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ConversationMessage, into buf: inout [UInt8]) {
        FfiConverterTypeRole.write(value.role, into: &buf)
        FfiConverterString.write(value.text, into: &buf)
    }
}


public func FfiConverterTypeConversationMessage_lift(_ buf: RustBuffer) throws -> ConversationMessage {
    return try FfiConverterTypeConversationMessage.lift(buf)
}

public func FfiConverterTypeConversationMessage_lower(_ value: ConversationMessage) -> RustBuffer {
    return FfiConverterTypeConversationMessage.lower(value)
}


public struct InferenceOptions {
    public var tokenCount: UInt16
    public var temperature: Double
    public var topP: Double?
    public var topK: UInt64?
    public var repeatPenalty: Float
    public var repeatLastN: UInt16
    public var seed: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(tokenCount: UInt16, temperature: Double, topP: Double?, topK: UInt64?, repeatPenalty: Float, repeatLastN: UInt16, seed: UInt64) {
        self.tokenCount = tokenCount
        self.temperature = temperature
        self.topP = topP
        self.topK = topK
        self.repeatPenalty = repeatPenalty
        self.repeatLastN = repeatLastN
        self.seed = seed
    }
}


extension InferenceOptions: Equatable, Hashable {
    public static func ==(lhs: InferenceOptions, rhs: InferenceOptions) -> Bool {
        if lhs.tokenCount != rhs.tokenCount {
            return false
        }
        if lhs.temperature != rhs.temperature {
            return false
        }
        if lhs.topP != rhs.topP {
            return false
        }
        if lhs.topK != rhs.topK {
            return false
        }
        if lhs.repeatPenalty != rhs.repeatPenalty {
            return false
        }
        if lhs.repeatLastN != rhs.repeatLastN {
            return false
        }
        if lhs.seed != rhs.seed {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(tokenCount)
        hasher.combine(temperature)
        hasher.combine(topP)
        hasher.combine(topK)
        hasher.combine(repeatPenalty)
        hasher.combine(repeatLastN)
        hasher.combine(seed)
    }
}


public struct FfiConverterTypeInferenceOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InferenceOptions {
        return try InferenceOptions(
            tokenCount: FfiConverterUInt16.read(from: &buf), 
            temperature: FfiConverterDouble.read(from: &buf), 
            topP: FfiConverterOptionDouble.read(from: &buf), 
            topK: FfiConverterOptionUInt64.read(from: &buf), 
            repeatPenalty: FfiConverterFloat.read(from: &buf), 
            repeatLastN: FfiConverterUInt16.read(from: &buf), 
            seed: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: InferenceOptions, into buf: inout [UInt8]) {
        FfiConverterUInt16.write(value.tokenCount, into: &buf)
        FfiConverterDouble.write(value.temperature, into: &buf)
        FfiConverterOptionDouble.write(value.topP, into: &buf)
        FfiConverterOptionUInt64.write(value.topK, into: &buf)
        FfiConverterFloat.write(value.repeatPenalty, into: &buf)
        FfiConverterUInt16.write(value.repeatLastN, into: &buf)
        FfiConverterUInt64.write(value.seed, into: &buf)
    }
}


public func FfiConverterTypeInferenceOptions_lift(_ buf: RustBuffer) throws -> InferenceOptions {
    return try FfiConverterTypeInferenceOptions.lift(buf)
}

public func FfiConverterTypeInferenceOptions_lower(_ value: InferenceOptions) -> RustBuffer {
    return FfiConverterTypeInferenceOptions.lower(value)
}


public struct InferenceResult {
    public var resultText: String
    public var tokenCount: UInt16
    public var duration: Double
    public var tokensPerSecond: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(resultText: String, tokenCount: UInt16, duration: Double, tokensPerSecond: Double) {
        self.resultText = resultText
        self.tokenCount = tokenCount
        self.duration = duration
        self.tokensPerSecond = tokensPerSecond
    }
}


extension InferenceResult: Equatable, Hashable {
    public static func ==(lhs: InferenceResult, rhs: InferenceResult) -> Bool {
        if lhs.resultText != rhs.resultText {
            return false
        }
        if lhs.tokenCount != rhs.tokenCount {
            return false
        }
        if lhs.duration != rhs.duration {
            return false
        }
        if lhs.tokensPerSecond != rhs.tokensPerSecond {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(resultText)
        hasher.combine(tokenCount)
        hasher.combine(duration)
        hasher.combine(tokensPerSecond)
    }
}


public struct FfiConverterTypeInferenceResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InferenceResult {
        return try InferenceResult(
            resultText: FfiConverterString.read(from: &buf), 
            tokenCount: FfiConverterUInt16.read(from: &buf), 
            duration: FfiConverterDouble.read(from: &buf), 
            tokensPerSecond: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: InferenceResult, into buf: inout [UInt8]) {
        FfiConverterString.write(value.resultText, into: &buf)
        FfiConverterUInt16.write(value.tokenCount, into: &buf)
        FfiConverterDouble.write(value.duration, into: &buf)
        FfiConverterDouble.write(value.tokensPerSecond, into: &buf)
    }
}


public func FfiConverterTypeInferenceResult_lift(_ buf: RustBuffer) throws -> InferenceResult {
    return try FfiConverterTypeInferenceResult.lift(buf)
}

public func FfiConverterTypeInferenceResult_lower(_ value: InferenceResult) -> RustBuffer {
    return FfiConverterTypeInferenceResult.lower(value)
}

public enum PhiError {

    
    
    case InitalizationError(errorText: String)
    case LockingError(errorText: String)
    case InferenceError(errorText: String)
    case GpuNotSupported

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypePhiError.lift(error)
    }
}


public struct FfiConverterTypePhiError: FfiConverterRustBuffer {
    typealias SwiftType = PhiError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PhiError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InitalizationError(
            errorText: try FfiConverterString.read(from: &buf)
            )
        case 2: return .LockingError(
            errorText: try FfiConverterString.read(from: &buf)
            )
        case 3: return .InferenceError(
            errorText: try FfiConverterString.read(from: &buf)
            )
        case 4: return .GpuNotSupported

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PhiError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .InitalizationError(errorText):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(errorText, into: &buf)
            
        
        case let .LockingError(errorText):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(errorText, into: &buf)
            
        
        case let .InferenceError(errorText):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(errorText, into: &buf)
            
        
        case .GpuNotSupported:
            writeInt(&buf, Int32(4))
        
        }
    }
}


extension PhiError: Equatable, Hashable {}

extension PhiError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum PhiModelProvider {
    
    case huggingFace(modelRepo: String, modelFileName: String, modelRevision: String)
    case fileSystem(modelPath: String)
}

public struct FfiConverterTypePhiModelProvider: FfiConverterRustBuffer {
    typealias SwiftType = PhiModelProvider

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PhiModelProvider {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .huggingFace(
            modelRepo: try FfiConverterString.read(from: &buf), 
            modelFileName: try FfiConverterString.read(from: &buf), 
            modelRevision: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .fileSystem(
            modelPath: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PhiModelProvider, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .huggingFace(modelRepo,modelFileName,modelRevision):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(modelRepo, into: &buf)
            FfiConverterString.write(modelFileName, into: &buf)
            FfiConverterString.write(modelRevision, into: &buf)
            
        
        case let .fileSystem(modelPath):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(modelPath, into: &buf)
            
        }
    }
}


public func FfiConverterTypePhiModelProvider_lift(_ buf: RustBuffer) throws -> PhiModelProvider {
    return try FfiConverterTypePhiModelProvider.lift(buf)
}

public func FfiConverterTypePhiModelProvider_lower(_ value: PhiModelProvider) -> RustBuffer {
    return FfiConverterTypePhiModelProvider.lower(value)
}


extension PhiModelProvider: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Role {
    
    case assistant
    case user
}

public struct FfiConverterTypeRole: FfiConverterRustBuffer {
    typealias SwiftType = Role

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Role {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .assistant
        
        case 2: return .user
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Role, into buf: inout [UInt8]) {
        switch value {
        
        
        case .assistant:
            writeInt(&buf, Int32(1))
        
        
        case .user:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeRole_lift(_ buf: RustBuffer) throws -> Role {
    return try FfiConverterTypeRole.lift(buf)
}

public func FfiConverterTypeRole_lower(_ value: Role) -> RustBuffer {
    return FfiConverterTypeRole.lower(value)
}


extension Role: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum TokenizerProvider {
    
    case huggingFace(tokenizerRepo: String, tokenizerFileName: String)
    case fileSystem(tokenizerPath: String)
}

public struct FfiConverterTypeTokenizerProvider: FfiConverterRustBuffer {
    typealias SwiftType = TokenizerProvider

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TokenizerProvider {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .huggingFace(
            tokenizerRepo: try FfiConverterString.read(from: &buf), 
            tokenizerFileName: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .fileSystem(
            tokenizerPath: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TokenizerProvider, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .huggingFace(tokenizerRepo,tokenizerFileName):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(tokenizerRepo, into: &buf)
            FfiConverterString.write(tokenizerFileName, into: &buf)
            
        
        case let .fileSystem(tokenizerPath):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(tokenizerPath, into: &buf)
            
        }
    }
}


public func FfiConverterTypeTokenizerProvider_lift(_ buf: RustBuffer) throws -> TokenizerProvider {
    return try FfiConverterTypeTokenizerProvider.lift(buf)
}

public func FfiConverterTypeTokenizerProvider_lower(_ value: TokenizerProvider) -> RustBuffer {
    return FfiConverterTypeTokenizerProvider.lower(value)
}


extension TokenizerProvider: Equatable, Hashable {}



fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate typealias UniFFICallbackHandle = UInt64
fileprivate class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 0
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for PhiEventHandler Callback Interface

public protocol PhiEventHandler : AnyObject {
    func onModelLoaded() throws
    func onInferenceToken(token: String) throws
    
}

// The ForeignCallback that is passed to Rust.
fileprivate let foreignCallbackCallbackInterfacePhiEventHandler : ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
    

    func invokeOnModelLoaded(_ swiftCallbackInterface: PhiEventHandler, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.onModelLoaded(
                    )
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as PhiError {
            out_buf.pointee = FfiConverterTypePhiError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }

    func invokeOnInferenceToken(_ swiftCallbackInterface: PhiEventHandler, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.onInferenceToken(
                    token:  try FfiConverterString.read(from: &reader)
                    )
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as PhiError {
            out_buf.pointee = FfiConverterTypePhiError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }


    switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfacePhiEventHandler.drop(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            let cb: PhiEventHandler
            do {
                cb = try FfiConverterCallbackInterfacePhiEventHandler.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("PhiEventHandler: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeOnModelLoaded(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 2:
            let cb: PhiEventHandler
            do {
                cb = try FfiConverterCallbackInterfacePhiEventHandler.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("PhiEventHandler: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeOnInferenceToken(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        
        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfacePhiEventHandler {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_strathweb_phi_engine_fn_init_callback_phieventhandler(foreignCallbackCallbackInterfacePhiEventHandler, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<PhiEventHandler>()
}

extension FfiConverterCallbackInterfacePhiEventHandler : FfiConverter {
    typealias SwiftType = PhiEventHandler
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized();
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized();
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized();
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized();
        writeInt(&buf, lower(v))
    }
}

fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionDouble: FfiConverterRustBuffer {
    typealias SwiftType = Double?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDouble.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDouble.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceTypeConversationMessage: FfiConverterRustBuffer {
    typealias SwiftType = [ConversationMessage]

    public static func write(_ value: [ConversationMessage], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeConversationMessage.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ConversationMessage] {
        let len: Int32 = try readInt(&buf)
        var seq = [ConversationMessage]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeConversationMessage.read(from: &buf))
        }
        return seq
    }
}

public func enableTracing()  {
    try! rustCall() {
    uniffi_strathweb_phi_engine_fn_func_enable_tracing($0)
}
}



private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_strathweb_phi_engine_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_func_enable_tracing() != 50910) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_build() != 28378) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_repeat_last_n() != 14246) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_repeat_penalty() != 54457) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_seed() != 12787) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_temperature() != 58616) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_token_count() != 29452) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_top_k() != 9530) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_top_p() != 13256) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_phiengine_run_inference() != 39104) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_build() != 43270) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_build_stateful() != 3316) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_try_use_gpu() != 35151) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_context_window() != 63976) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_event_handler() != 16167) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_flash_attention() != 39059) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_model_provider() != 52034) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_tokenizer_provider() != 48882) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_statefulphiengine_clear_messsages() != 56959) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_statefulphiengine_get_history() != 14412) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_statefulphiengine_run_inference() != 33058) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_constructor_boxedphieventhandler_new() != 59537) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_constructor_inferenceoptionsbuilder_new() != 17185) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_constructor_phienginebuilder_new() != 57958) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_phieventhandler_on_model_loaded() != 49339) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_strathweb_phi_engine_checksum_method_phieventhandler_on_inference_token() != 5088) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}